Algoritmo de la Función Dialogo 

1.	La función recibe los Parámetros:
String texto: La etiqueta que se muestra al usuario para solicitar una entrada.
2.	Inicialización de variables:
Se declara una variable cadena que almacenará la entrada del usuario.
3.	Impresión del mensaje y Solicitud de datos por teclado:
Se imprime en la consola el valor del parámetro texto, seguido de dos puntos y un espacio. Esto indica al usuario que debe ingresar una respuesta.
Se asigna a la variable cadena el resultado de leer una línea de texto ingresada por el usuario. La lectura se detiene cuando el usuario presiona la tecla Enter.
4.	Retorno del valor:
La función devuelve el valor almacenado en cadena, que es la respuesta proporcionada por el usuario


Algoritmo MostrarMenu                                    
1.	La función se llama MostrarMenu y recibe un parámetro: 
•	un arreglo de cadenas (String[] opciones) que contiene las opciones del menú que se desean mostrar.
2.	Inicialización de variables:
o	Se declara una variable cadena y se inicializa como una cadena vacía (""). Esta variable almacenará el menú formateado.
o	Se declara una variable i e inicializa en 0. Esta variable servirá como índice para iterar sobre el arreglo opciones.
3.	Bucle de iteración:
o	Se utiliza un bucle while para recorrer el arreglo de opciones. La condición del bucle es i < opciones.length, lo que garantiza que se itere sobre todos los elementos del arreglo.
	Se concatena a la variable cadena la opción actual, prefijada por su número correspondiente (usando i + 1 para que las opciones comiencen desde 1) y seguida de un salto de línea (\n). La línea de código que realiza esta acción es:
o	Incremento del índice, después de agregar la opción a la cadena, se incrementa el índice i en 1 (i++) para pasar a la siguiente opción en el arreglo.
o	El bucle continúa hasta que i ya no es menor que la longitud del arreglo opciones, lo que significa que se han procesado todas las opciones.
4.	Retorno de Valor
Una vez completada la iteración, la función retorna la variable cadena, que ahora contiene todas las opciones del menú formateadas y listas para ser mostradas al usuario.


Algoritmo DESPLEGARMENU                                    
1. La función recibe los Parámetros: 
String Titulo1: Título del menú que se mostrará al usuario. 
String[] menu: Arreglo de cadenas que contiene las opciones del menú. 
2. Inicialización de variables: 
Se declara una variable cadena. 
3. Construcción del Menú: 
Se inicializa cadena con el valor de Titulo1, seguido de dos líneas en blanco. 
Se concatena cadena con el resultado del método MostrarMenu(menu), que 
genera una representación de las opciones del menú. 
Se concatena cadena con un mensaje que solicita al usuario que elija una 
opción. 
4. Lectura de la Opción Elegida: 
Se llama al método Dialogo(cadena) para leer la opción elegida por el usuario 
y se devuelve este valor.


Algoritmo Leer                                     
1.	La función recibe los Parámetros:
String texto: Mensaje que se muestra al usuario para solicitar una entrada.
2.	Declaración de Variables:
Se declara una variable cadena e inicializa como una cadena vacía ("").
3.	Lectura de la entrada:
Se llama al método Dialogo(texto) para solicitar la entrada del usuario y se almacena el resultado en cadena.
Comprobación de nulo:
Se verifica si cadena no es nula:
Si no es nula:
Se eliminan los espacios en blanco al principio y al final de cadena con cadena.trim().
Se verifica si cadena está vacía:
Si está vacía, se asigna null a cadena.
Si es nula, se asigna null a cadena.
4.	Retorno del valor:
La función devuelve el valor de cadena, que puede ser una cadena válida, una cadena vacía convertida a null, o null si no se ingresó nada.


 Algoritmo EsNumeroEntero 
1.	La función recibe un Parámetro:
a.	String dato: Este parámetro es la cadena que se desea evaluar para determinar si representa un número entero. Su uso permite que la función sea versátil y pueda aplicarse a diferentes entradas de usuario.
2.	Iteración sobre caracteres:
a.	Se utiliza un bucle for para recorrer cada carácter del arreglo. Para cada carácter, que comprueba si el carácter actual es un dígito numérico.
i.	Si se encuentra un carácter que no es un dígito, la función retorna false inmediatamente. Esto asegura que la evaluación sea eficiente, ya que no se continúa revisando el resto de la cadena si se detecta un carácter inválido.
3.	Retorno de Valor
Si todos los caracteres de la cadena son dígitos, al finalizar el bucle, la función retorna true, confirmando que la cadena representa un número entero válido.


Algoritmo EsNumeroDouble                                  
1.	La función recibe un parámetro 
a.	dato, que es una cadena que se desea evaluar para verificar si representa un número decimal.
2.	Inicialización de variables:
a.	Se inicializa una variable valida en false. Esta variable se utilizará para indicar si la cadena representa un número decimal válido.
3.	Evaluación de la cadena 
a.	Iteración sobre caracteres. El algoritmo convierte la cadena en un arreglo de caracteres para poder acceder a cada carácter individualmente.
b.	Verificación de dígitos y puntos, se recorre cada carácter del arreglo. Para cada carácter, Se comprueba si es un dígito.
c.	Si no es un dígito, se verifica si es un punto decimal.
i.	Si se encuentra un punto y la variable valido es false, significa que es el primer punto en la cadena, por lo que se establece valido como true.
d.	Si se encuentra un segundo punto, se devuelve false, ya que un número decimal solo puede tener un único punto.
e.	Si se encuentra un carácter que no es un dígito ni un punto, se devuelve false.
4.	Retorno de Valor
Al finalizar la iteración, si todos los caracteres han sido validados y son dígitos o un solo punto, se retorna el valor de valido. Si es true, significa que la cadena representa un número decimal válido.


Desarrollo del Algoritmo EvaluarNumerico 
1.	La función recibe los Parámetros:
o	String dato: La cadena que se desea evaluar para verificar si representa un número.
o	int tipo: Un entero que indica el tipo de número a validar (1 para entero, 2 para decimal).
2.	Inicialización de variables:
o	Se declara una variable valida e inicializa en false. Esta variable se utilizará para indicar si la cadena representa un número válido.
3.	Evaluación del tipo, se utiliza un bloque case para evaluar el valor del parámetro tipo.
o	Si el tipo es 1, se llama a la función EsNumeroEntero(dato) para comprobar si la cadena es un número entero. Si el resultado es true, se establece valido a true.
o	Si el tipo es 2, se llama a la función EsNumeroDouble(dato) para comprobar si la cadena es un número decimal. De nuevo, si el resultado es true, se establece valido a true.
4.	Retorno de Valor 
Finalmente, la función devuelve el valor de valido, que indicará si la cadena es un número válido según el tipo especificado.


Desarrollo del Algoritmo RellenarEspacios 
1.	La función recibe los Parámetros:
String dato: Cadena de texto que se va a rellenar con espacios.
int tamano: Tamaño total que debe tener la cadena resultante, incluyendo los espacios.
2.	Inicialización de variables:
Se declara una variable cadena y se inicializa con el valor de dato.
3.	Relleno de Espacios:
Se inicia un bucle for que itera desde la longitud de dato hasta el tamaño especificado (tamano).
En cada iteración del bucle, se concatena un espacio al final de cadena.
4.	Retorno del valor:
La función devuelve la cadena resultante, que ahora incluye los espacios necesarios para alcanzar el tamaño especificado.


Desarrollo del Algoritmo IdticketSiguiente 
1.	La función recibe los Parámetros:
String idticket: Un identificador de ticket en forma de cadena.
2.	Inicialización de variables:
Se declara una variable idticketnext e inicializa como una cadena vacía para almacenar el número del siguiente ticket.
3.	Conversión y Cálculo:
Se convierte idticket a un número entero utilizando Integer.parseInt(idticket) y se incrementa en 1, almacenando el resultado en la variable num.
4.	Formateo del Número de Ticket:
Se comprueba si num es menor que 10:
Si es menor que 10: Se asigna a idticketnext el valor de num con dos ceros a la izquierda ("00" + String.valueOf(num)).
Se verifica si num está entre 10 y 99:
Si está en este rango: Se asigna a idticketnext el valor de num con un cero a la izquierda ("0" + String.valueOf(num)).
Si es 100 o mayor: Se asigna a idticketnext el valor de num tal cual.
5.	Retorno del valor:
La función devuelve idticketnext, que representa el número del siguiente ticket formateado


Algoritmo ObtenerUltimaPosicion 
1.	La función recibe los parámetros: 
La función se llama ObtenerUltimaPosicion y recibe un parámetro matriz, que es una matriz bidimensional de cadenas (String).
2.	Inicialización de variables: 
a.	Se declara una variable llamada ultimaPosicion y se inicializa con el valor -1. Esta variable almacenará la posición de la última fila que cumpla cierta condición.
3.	Iteración a través de la matriz: 
a.	Se utiliza un bucle for para iterar a través de cada fila de la matriz. 
b.	La variable i actúa como el índice de la fila actual.
4.	Verificación de contenido: 
a.	Dentro del bucle, se verifica si el primer elemento de la fila actual (matriz[i][0]) no es nulo y no está vacío. 
b.	Esto se hace para comprobar si la primera columna de la fila contiene algún valor.
5.	Actualización 
a.	ultimaPosicion: Si la condición anterior es verdadera, se actualiza la variable ultimaPosicion con el índice de la fila actual (i).
6.	Fin del bucle y retorno del resultado: 
a.	Después de recorrer todas las filas de la matriz, se devuelve el valor de ultimaPosicion. 
b.	Si ninguna fila cumple con la condición, ultimaPosicion seguirá siendo -1.


Algoritmo Fecha para C++
1.	 La función No recibe parámetros
2.	Obtener la fecha y hora actual del sistema
auto now = std::chrono::system_clock::now();
3.	Extraer los componentes
std::time_t time = std::chrono::system_clock::to_time_t(now); 
std::tm* localTime = std::localtime(&time); 
4.	Convertir cada componente a texto
std::stringstream ss; 
5.	Asegurar formato de 2 dígitos para día y mes y Combinar componentes en formato "dd-MM-yyyy"
    ss << std::setfill('0') 
       << std::setw(2) << localTime->tm_mday << "-"
       << std::setw(2) << localTime->tm_mon + 1 << "-"
       << localTime->tm_year + 1900;
6.	Retornar cadena resultante
ss.str()

Algoritmo Fecha para Java
1.	 La función No recibe parámetros
2.	Obtener la fecha y hora actual del sistema
Date fecha = new Date();
3.	Extraer los componentes, Convertir cada componente a texto, Asegurar formato de 2 dígitos para día y mes y Combinar componentes en formato "dd-MM-yyyy"
SimpleDateFormat formatodia = new SimpleDateFormat("dd-MM-yyyy");
4.	Retornar cadena resultante
formatodia.format(fecha);

Algoritmo Fecha para C#
1.	 La función No recibe parámetros
2.	Obtener la fecha y hora actual del sistema
    DateTime fecha = DateTime.Now;
3.	Extraer los componentes , Convertir cada componente a texto , Asegurar formato de 2 dígitos para día y mes , Combinar componentes en formato "dd-MM-yyyy" y Retornar cadena resultante
fecha.ToString("dd-MM-yyyy");


Algoritmo Fecha para Js
1.	 La función No recibe parámetros
2.	Obtener la fecha y hora actual del sistema
        const date = new Date();
3.	Extraer los componentes , Convertir cada componente a texto , Asegurar formato de 2 dígitos para día y mes , Combinar componentes en formato "dd-MM-yyyy" y Retornar cadena resultante
return date.toLocaleDateString('en-GB').split(' : ')
        .map(part => part.replace(' ', '/'))
        .reverse()
        .join('-');

