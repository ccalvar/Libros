
Para este caso haremos uso de  Runnable que es una interfaz que contiene el método abstracto run(), diseñado para encapsular una tarea que puede ser ejecutada por un hilo. Su principal característica es que no toma parámetros ni devuelve un valor, lo que lo hace perfecto para representar una acción simple. El uso de Runnable en este contexto beneficia la flexibilidad y la modularidad del código, permitiendo desacoplar la lógica de la interfaz del menú de la lógica de negocio real. Esto significa que cada opción del menú se asocia a una tarea específica, permitiendo reutilizar el mismo "motor" de menú con diferentes conjuntos de opciones y acciones sin modificar el procedimiento principal.


Algoritmo: GestionarMenus (Procedimiento)

Propósito: Controla la lógica de un menú genérico mostrando opciones y ejecutando acciones.
Parámetros de entrada: titulo (Texto), opciones (Arreglo de Texto), acciones (Arreglo de Tareas), salir (Booleano)
Valor de retorno: Ninguno

Inicializar variables: opcion (Texto), opcionSalida (Entero), opcionsalida2 (Entero)
Iniciar bucle de menú: Repetir hasta que se ordene terminar
Mostrar menú: Llamar a DesplegarMenu y guardar resultado en opcion
Validar entrada: Si opcion es nula o no es un entero
Mostrar error y continuar bucle
Verificar salida estándar: Si opcion es igual a opcionSalida
Ejecutar la acción de salida
Terminar bucle
Procesar opción:
Intentar convertir opcion a indice (Entero)
Validar si indice está en el rango de acciones
Si es válido:
Ejecutar la acción acciones[indice]
Verificar salida especial: Si salir es verdadero Y opcion es igual a opcionsalida2
Terminar bucle
Sino: Mostrar error de opción inexistente
Manejar error de conversión: Si la conversión a número falla, mostrar error

---
Algoritmo: MenuProductos (Procedimiento)

Propósito: Define y muestra el menú para la gestión de productos.
Parámetros de entrada: Ninguno
Valor de retorno: Ninguno

Definir opciones: Crear arreglo de texto datosmenuproductos
Definir acciones: Crear arreglo de tareas acciones para cada opción
Llamar a GestionarMenus: con el título, opciones, acciones, y salir en falso

---
Algoritmo: MenuPuntoVenta (Procedimiento)

Propósito: Configura y muestra el menú del punto de venta.
Parámetros de entrada: idticket (Texto)
Valor de retorno: Ninguno

Generar nuevo ticket: Llamar a IdTicketSiguiente con idticket y guardar resultado
Obtener fecha: Llamar a Fecha
Crear encabezado: Construir membrete con fecha y nuevo ticket
Definir opciones: Crear arreglo de texto datosmenupuntoventa
Definir acciones: Crear arreglo de tareas acciones para cada opción
Llamar a GestionarMenus: con el encabezado, opciones, acciones, y salir en verdadero

---
Algoritmo: MenuInventario (Procedimiento)

Propósito: Define y muestra el menú para la gestión de inventario.
Parámetros de entrada: Ninguno
Valor de retorno: Ninguno

Definir opciones: Crear arreglo de texto datosmenuinventario
Definir acciones: Crear arreglo de tareas acciones para cada opción
Llamar a GestionarMenus: con el título, opciones, acciones, y salir en falso

---
Algoritmo: MenuPrincipal (Procedimiento)

Propósito: Muestra el menú principal y permite navegar a los submenús.
Parámetros de entrada: Ninguno
Valor de retorno: Ninguno

Definir opciones: Crear arreglo de texto datosmenuprincipal
Definir acciones: Crear arreglo de tareas acciones, donde cada tarea es una llamada a otro procedimiento de menú (ej. MenuProductos)
Llamar a GestionarMenus: con el título, opciones, acciones, y salir en falso

---
Algoritmo: main (Procedimiento)

Propósito: Es el punto de inicio que arranca la aplicación.
Parámetros de entrada: args (Arreglo de Texto)
Valor de retorno: Ninguno

Llamar a MenuPrincipal para iniciar el sistema de menús
